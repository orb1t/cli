/*
 * Copyright (c) 2006 Pyxis Technologies inc.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA,
 * or see the FSF site: http://www.fsf.org.
 */

package com.pyxis.cli;

import com.pyxis.cli.gnu.GnuCommandLineStyle;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class CLI
{
    private final Map<Class<?>, Coercer<?>> coercers = new HashMap<Class<?>, Coercer<?>>();
    private final CommandLineStyle style;

    private CommandLine commandLine = new CommandLine();

    public CLI()
    {
        this( new GnuCommandLineStyle() );
    }

    public CLI(CommandLineStyle style)
    {
        this.style = style;
    }

    public <T> CoercerDefinition<T> coerceType(Class<T> type)
    {
        return new CoercerDefinition<T>( type );
    }

    public class CoercerDefinition<T>
    {

        private Class<T> type;

        public CoercerDefinition(Class<T> type)
        {
            this.type = type;
        }

        public void using(Coercer<T> coercer)
        {
            coercers.put( type, coercer );
        }
    }

    public void withBanner(String banner)
    {
        commandLine.setBanner( banner );
    }

    public OptionBuilder option(String name, String... options)
    {
        OptionBuilder builder = OptionBuilder.option( name );
        builder.defineCoercers( coercers );
        style.build( builder, options );
        return builder;
    }

    public void define(OptionBuilder optionBuilder)
    {
        define( optionBuilder.make() );
    }

    public void define(Option option)
    {
        commandLine.addOption( option );
    }

    public String[] parse(String... args) throws ParsingException
    {
        commandLine.parse( style, args );
        return commandLine.getOperands();
    }

    public String getOperand( int index )
    {
        return commandLine.getOperand( index );
    }

    public String[] getOperands()
    {
        return commandLine.getOperands();
    }

    public int getOperandCount()
    {
        return commandLine.getOperandCount();
    }

    public boolean hasOption(String name)
    {
        return commandLine.hasOptionValue( name );
    }

    public Map<String, ?> getOptions()
    {
        return commandLine.getOptionValues();
    }

    public Object getOption(String name)
    {
        return commandLine.getOptionValue( name );
    }

    public void writeUsageTo(Appendable appendable) throws IOException
    {
        commandLine.formatHelp( style );
        style.appendTo( appendable );
    }
}