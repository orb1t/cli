/*
 * Copyright (c) 2007 Pyxis Technologies inc.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA,
 * or see the FSF site: http://www.fsf.org.
 */

package com.pyxis.cli;

import com.pyxis.cli.coercion.ClassCoercer;
import com.pyxis.cli.coercion.FileCoercer;
import com.pyxis.cli.coercion.IntegerCoercer;
import com.pyxis.cli.coercion.LocaleCoercer;
import com.pyxis.cli.coercion.StringCoercer;

import java.io.File;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class OptionBuilder
{
    private final Option option;

    private final Map<Class, Coercer<?>> coercers = new HashMap<Class, Coercer<?>>();
    {
        defineCoercer(String.class, new StringCoercer());
        defineCoercer(Integer.class, new IntegerCoercer());
        defineCoercer(int.class, new IntegerCoercer());
        defineCoercer(Locale.class, new LocaleCoercer());
        defineCoercer(File.class, new FileCoercer());
        defineCoercer(Class.class, new ClassCoercer());
    }

    public static OptionBuilder option(String name)
    {
        return new OptionBuilder(name);
    }

    protected OptionBuilder(String name)
    {
        option = new Option(name);
    }

    public OptionBuilder wantsArgument(String value)
    {
        option.setArgumentPattern(value);
        return this;
    }

    public OptionBuilder withShortForm(String shortForm)
    {
        option.setShortForm(shortForm);
        return this;
    }

    public OptionBuilder withDescription(String text)
    {
        option.setDescription(text);
        return this;
    }

    public OptionBuilder withLongForm(String longForm)
    {
        option.setLongForm(longForm);
        return this;
    }

    public OptionBuilder defaultingTo(Object value)
    {
        option.setValue(value);
        return this;
    }

    public OptionBuilder asType(Class type)
    {
        return coerceWith(coercerFor(type));
    }

    public OptionBuilder coerceWith(Coercer coercer)
    {
        option.setCoercer(coercer);
        return this;
    }

    public OptionBuilder whenPresent(Option.Stub stub)
    {
        option.setStub(stub);
        return this;
    }

    public Option make()
    {
        if (!option.isValid()) throw new IllegalArgumentException("No switch given");
        return option;
    }

    public void defineCoercers(Map<Class<?>, Coercer<?>> coercers)
    {
        this.coercers.putAll(coercers);
    }

    public <T> void defineCoercer(Class<T> type, Coercer<T> coercer)
    {
        this.coercers.put(type, coercer);
    }

    private Coercer coercerFor(Class type)
    {
        if (!coercers.containsKey(type))
            throw new IllegalArgumentException("Don't know type: " + type);

        return coercers.get(type);
    }
}
