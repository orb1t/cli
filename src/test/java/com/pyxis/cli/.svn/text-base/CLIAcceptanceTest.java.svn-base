/*
 * Copyright (c) 2006 Pyxis Technologies inc.
 *
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA,
 * or see the FSF site: http://www.fsf.org.
 */

package com.pyxis.cli;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Locale;

public class CLIAcceptanceTest
{
    private CLI cli;

    @Before
    public void setUp()
    {
    }

    @Test
    public void usingSimpleSwitches() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "debug" ).withShortForm( "x" ).withDescription( "Turns debugging on" ));
        }};
        cli.parse( "-x" );
        assertTrue( cli.hasOption( "debug" ) );
    }

    @Test
    public void definingAnOptionThatExpectsAParameter() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "block size" ).withShortForm( "b" ).wantsArgument( "SIZE" ) );
        }};
        cli.parse( "-b", "1024" );

        assertTrue( cli.hasOption( "block size" ) );
        assertEquals( "1024", cli.getOption( "block size" ) );
    }

    @Test
    public void definingAnOptionWithAShortFormAndALongForm() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "debug" ).withShortForm( "-x" ).withLongForm( "debug" ) );
        }};
        cli.parse( "--debug" );
        assertTrue( cli.hasOption( "debug" ) );
    }

    @Test
    public void usingCommandLineOperands() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "debug" ).withLongForm( "debug" ) );
        }};
        cli.parse( "--debug", "input", "output" );

        assertEquals( 2, cli.getOperandCount() );
        assertEquals( "input", cli.getOperand(0) );
        assertEquals( "output", cli.getOperand(1) );
    }

    @Test
    public void aMoreComplexExampleThatUsesAMixOfDifferentOptions() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "human" ).withShortForm( "h" ).withDescription( "Human readable format" ) );
            define( option( "block size" ).withLongForm( "block-size" ).wantsArgument( "SIZE" ) );
            define( option( "debug" ).withShortForm( "x" ) );
        }};

        cli.parse( "-h", "--block-size", "1024", "-x", "input", "output" );
        assertEquals( 3, cli.getOptions().size() );
        assertTrue( cli.hasOption( "human" ) );
        assertEquals( "1024", cli.getOption( "block size" ) );
        assertTrue( cli.hasOption( "debug" ) );
        assertEquals( "[input, output]", Arrays.toString( cli.getOperands() ) );
    }

    @Test
    public void specifyingTheTypeOfAnOption() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "block size" ).withShortForm( "b" ).wantsArgument( "SIZE" ).asType( int.class ) );
        }};
        cli.parse( "-b", "1024" );
        assertEquals( 1024, cli.getOption( "block size" ) );
    }

    @Test
    public void specifyingADefaultValueForAnOption() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "block size" ).withShortForm( "b" ).wantsArgument( "SIZE" ).asType( int.class ).defaultingTo( 1024 ) );
        }};
        cli.parse();
        assertEquals( 1024, cli.getOption( "block size" ) );
    }

    @Test
    public void specifyingAnOptionInLiteralForm() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "block size", "-b", "--block-size SIZE", "Specifies block size" ) );
        }};
        cli.parse( "--block-size", "1024" );
        assertTrue( cli.hasOption( "block size" ) );
        assertEquals( "1024", cli.getOption( "block size" ) );
    }

    @Test
    public void usingBuiltInCoercers() throws ParsingException
    {
        cli = new CLI() {{
            define( option( "file" ).withShortForm( "f" ).wantsArgument( "PATH" ).asType( File.class ) );
            define( option( "class" ).withShortForm( "c" ).wantsArgument( "CLASS NAME" ).asType( Class.class ) );
        }};
        cli.parse( "-f", "/path/to/file", "-c", "java.lang.String" );
        assertEquals( new File( "/path/to/file" ), cli.getOption( "file" ) );
        assertEquals( String.class, cli.getOption( "class" ) );
    }

    @Test
    public void usingACustomOptionType() throws ParsingException
    {
        cli = new CLI() {{
            coerceType( BigDecimal.class ).using( new BigDecimalCoercer() );
            define( option( "size", "--size VALUE" ).asType( BigDecimal.class ) );
        }};
        cli.parse( "--size", "1000.00" );
        assertEquals( new BigDecimal("1000.00"), cli.getOption( "size" ) );
    }

    @Test
    public void executingACodeBlockWhenAnOptionIsDetected() throws ParsingException
    {
        final CaptureLocale captureLocale = new CaptureLocale();
        cli = new CLI() {{
            define( option( "locale", "-l LOCALE" ).asType( Locale.class ).whenPresent( captureLocale ) );
        }};

        cli.parse( "-l", "FR" );
        assertEquals( Locale.FRENCH, captureLocale.locale);
    }

    @Test
    public void displayingHelp() throws ParsingException, IOException
    {
        cli = new CLI() {{
            withBanner( "My cool program v1.0" );

            define( option( "raw" ).withLongForm( "raw" ).withDescription( "Specifies raw ouput format" ) );
            define( option( "block size" ).withShortForm( "b" ).withLongForm( "block-size" ).wantsArgument( "SIZE" ).withDescription( "Specifies block size" ) );
            define( option( "debug" ).withShortForm( "x" ).withDescription( "Turn debugging on" ) );
        }};
        assertEquals(
            "Usage: My cool program v1.0\n" +
            "\n" +
            "Options:\n" +
            "    --raw                     Specifies raw ouput format\n" +
            "-b, --block-size SIZE         Specifies block size\n" +
            "-x                            Turn debugging on",
            usage( cli ) );
    }

    @Test
    public void detectingAnUnrecognizedOption() throws Exception {

        cli = new CLI();
        try
        {
            cli.parse( "-whatever" );
            fail();
        }
        catch (UnrecognizedOptionException expected)
        {
            assertEquals( "-whatever", expected.getTrigger() );
        }
    }

    @Test
    public void passingAnInvalidArgumentToAnOption() throws Exception {
        cli = new CLI() {{
            define( option( "block size", "-b SIZE" ).asType( int.class ) );
        }};
        try
        {
            cli.parse( "-b", "LITERAL");
            fail();
        }
        catch (InvalidArgumentException expected)
        {
            assertEquals( "block size", expected.getOption().getName() );
            assertEquals( "LITERAL", expected.getValue() );
        }
    }

    @Test
    public void ommittingARequiredOptionArgument() throws Exception {
        cli = new CLI() {{
            define( option( "block size", "-b SIZE" ).asType( int.class ) );
        }};
        try
        {
            cli.parse( "-b");
            fail();
        }
        catch (ArgumentMissingException expected)
        {
            assertEquals( "block size", expected.getOption().getName() );
        }
    }

    public static class CaptureLocale implements Option.Stub
    {
        public Locale locale = Locale.ENGLISH;

        public void call(Option option)
        {
            locale = (Locale) option.getValue();
        }
    }

    public static class BigDecimalCoercer implements Coercer<BigDecimal>
    {
        public BigDecimal convert(String value) throws Exception
        {
            return new BigDecimal(value);
        }
    }

    private String usage(CLI cli) throws IOException
    {
        StringBuilder sb = new StringBuilder();
        cli.writeUsageTo( sb );
        return sb.toString();
    }
}

