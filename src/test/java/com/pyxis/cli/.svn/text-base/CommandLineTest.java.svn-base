package com.pyxis.cli;

import com.pyxis.cli.gnu.GnuParser;
import org.jmock.Mockery;
import org.jmock.Expectations;
import org.jmock.integration.junit4.JUnit4Mockery;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(org.jmock.integration.junit4.JMock.class)
public class CommandLineTest
{
    private Mockery context = new JUnit4Mockery();
    private CommandLine cl;

    @Before
    public void setUp() {
        cl = new CommandLine();
    }

    @Test
    public void operandsAreEmptyByDefault() {
        assertEquals( 0, cl.getOperandCount() );
    }

    @Test
    public void accessingOutOfRangeOperandsReturnsNothing() {
        assertNull( cl.getOperand(1) );
    }

    @Test
    public void operandsAreAccessibleByIndex() throws ParsingException
    {
        cl.parse( new GnuParser(), "first", "second", "third");
        assertEquals( "first", cl.getOperand( 0 ) );
        assertEquals( "second", cl.getOperand( 1 ) );
        assertEquals( "third", cl.getOperand( 2 ) );
    }

    @Test
    public void optionShouldHaveNoValueUnlessGiven() throws ParsingException
    {
        cl.addOption( OptionBuilder.option( "debug" ).withShortForm( "d" ).make() );
        assertFalse( cl.hasOptionValue( "debug" ) );
        assertNull( cl.getOptionValue( "debug" ) );

        cl.parse( new GnuParser(), "-d") ;
        assertTrue( cl.hasOptionValue( "debug" ) );
        assertEquals( Boolean.TRUE, cl.getOptionValue( "debug" ) );
    }

    @Test
    public void stubIsCalledWhenOptionIsGiven() throws ParsingException
    {
        final Option.Stub turnDebugOn = context.mock( Option.Stub.class, "turn debug on");
        final Option debug = OptionBuilder.option( "debug" ).withShortForm( "d" ).whenPresent( turnDebugOn ).make();
        cl.addOption( debug );

        final Option.Stub setLocale = context.mock( Option.Stub.class, "set locale");
        final Option locale = OptionBuilder.option( "locale" ).withShortForm( "l" ).whenPresent( setLocale ).make();
        cl.addOption( locale );

        context.checking( new Expectations() {{
            never( turnDebugOn );
            one( setLocale ).call( with( equal( locale ) ) );
        }});

        cl.parse( new GnuParser(), "-l" );
    }
}
