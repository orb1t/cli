package com.pyxis.cli;

import static com.pyxis.cli.OptionBuilder.option;
import static org.junit.Assert.*;
import org.junit.Test;

import java.util.Arrays;
import java.util.Iterator;

public class OptionTest
{
    @Test
    public void optionValueIsNullByDefault() throws ParsingException
    {
        Option option = new Option( "option" );
        assertNull( option.getValue() );
    }

    @Test
    public void optionRequiresShortOrLongOptToBeValid()
    {
        Option option = new Option( "option" );
        assertFalse( option.isValid() );
        option.setShortForm( "b" );
        assertTrue( option.isValid() );
    }

    @Test
    public void optionWithoutArgumentIsConsideredBoolean() throws ParsingException
    {
        Option option = new Option( "option" );
        option.consume( arguments() );
        assertEquals( Boolean.TRUE, option.getValue() );
    }

    @Test
    public void optionCanRequireAnArgument() throws ParsingException
    {
        Option option = new Option( "option" );
        option.setArgumentPattern( "ARG" );

        try
        {
            option.consume( arguments() );
        }
        catch (ArgumentMissingException expected)
        {
            assertTrue( true );
        }

        option.consume( arguments( "value" ) );
        assertEquals( "value", option.getValue() );
    }

    @Test
    public void optionTypeCanBeSpecified() throws ParsingException
    {
        Option option = option( "block size" ).withShortForm( "b" ).wantsArgument( "SIZE" ).asType( int.class ).make();
        option.consume( arguments( "1024" ) );
        assertEquals( 1024, option.getValue() );
    }

    @Test
    public void optionCanHaveADefaultValue() throws ParsingException
    {
        Option option = option( "block size" ).withShortForm( "b" ).wantsArgument( "SIZE" ).asType( int.class ).defaultingTo( 1024 ).make();
        assertEquals( 1024, option.getValue() );
    }

    private Iterator<String> arguments(String... args)
    {
        return Arrays.asList( args ).iterator();
    }
}
